<?php
/*
 * Copyright the Collabora Online contributors.
 *
 * SPDX-License-Identifier: MPL-2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

use Drupal\collabora_online\Cool\CoolUtils;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Access\AccessResultReasonInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_theme().
 *
 * Register a module or theme's theme implementations.  The
 * implementations declared by this hook specify how a particular
 * render array is to be rendered as HTML.
 *
 * See:
 * https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme
 *
 * If you change this method, clear theme registry and routing table
 * 'drush cc theme-registry' and 'drush cc router'.
 */
function collabora_online_theme($existing, $type, $theme, $path) {

  return [
      'collabora_online' => [
          'render element' => 'children',
          'template' => 'collabora-online',
          'variables' => [
              'accessToken' => 'test',
              'accessTokenTtl' => '86400',
              'iFrameStyle' => 'width:95%;',
              'closebutton' => '',
              'allowfullscreen' => '',
              'wopiSrc' => 'http://localhost:9980/',
              'wopiClient' => 'https://localhost:9980/',
          ],
      ],
      // This is the template for the field preview
      'collabora_online_preview' => [
          'render element' => 'children',
          'template' => 'collabora-online-preview',
          'variables' => [
              'editorUrl' => 'about:blank',
              'fileName' => '',
          ],
      ],
      // This is the template for the complete page with embedding.
      'collabora_online_full' => [
          'template' => 'collabora-online-full',
          'variables' => [
              'accessToken' => 'test',
              'accessTokenTtl' => '86400',
              'iFrameStyle' => '',
              'closebutton' => '',
              'allowfullscreen' => '',
              'wopiSrc' => '/wopi/files/123',
              'wopiClient' => 'https://localhost:9980/',
          ],
          'file' => 'collabora_online.theme.inc',
      ],
  ];

}

/**
 * Implements hook_entity_operation().
 *
 * This is used to add the menu entry in the Media content to
 * open the viewer/editor directly.
 */
function collabora_online_entity_operation(EntityInterface $entity) {
    if (($entity->getEntityTypeId() != "media") ||
        ($entity->getSource()->getPluginId() != "file")) {
        return [];
    }

    /** @var \Drupal\media\MediaInterface $media */
    $media = $entity;

    if (!$media->access('preview in collabora')) {
        return [];
    }

    $file = CoolUtils::getFile($media);
    $type = CoolUtils::getDocumentType($file);

    if ($type == NULL) {
        return [];
    }

    $entries = [
        'collabora_online_view' => [
            'title' => t("View in Collabora Online"),
            'weight' => 50,
            'url' => CoolUtils::getEditorUrl($media, false),
        ]
    ];

    if (CoolUtils::canEdit($file) && $media->access('edit in collabora')) {
        $entries['collabora_online_edit'] = [
            'title' => t("Edit in Collabora Online"),
            'weight' => 50,
            'url' => CoolUtils::getEditorUrl($media, true),
        ];
    }

    return $entries;
}

/**
 * Implements hook_ENTITY_TYPE_access() for 'media'.
 *
 * Checks access for the new media operations provided by this module.
 */
function collabora_online_media_access(MediaInterface $media, string $operation, AccountInterface $account): AccessResultInterface {
    // Use switch () to align with other entity access hooks.
    switch ($operation) {
        case 'preview in collabora':
        case 'edit in collabora':
            break;

        default:
            return AccessResult::neutral();
    }

    // Both edit and preview require regular media view access.
    $media_view_access = $media->access('view', $account, TRUE);
    if (!$media_view_access->isAllowed()) {
        $reason = "Media 'view' access denied.";
        if ($media_view_access instanceof AccessResultReasonInterface) {
            $media_view_reason = $media_view_access->getReason();
            if ($media_view_reason !== NULL) {
                $reason = "Media 'view' access denied: $media_view_reason";
            }
        }
        return AccessResult::forbidden($reason)
            ->addCacheableDependency($media_view_access);
    }

    $type = $media->bundle();
    switch ($operation) {
        case 'preview in collabora':
            $collabora_access = AccessResult::allowedIfHasPermission($account, "preview $type in collabora");
            break;

        default:
            if ($account->hasPermission("edit any $type in collabora")) {
                $collabora_access = AccessResult::allowed()
                    ->cachePerPermissions();
            }
            elseif ($account->hasPermission("edit own $type in collabora")) {
                // Use '==' because Drupal sometimes loads integers as strings.
                $is_owner = ($account->id() && $account->id() == $media->getOwnerId());
                $collabora_access = AccessResult::allowedIf($is_owner)
                    ->cachePerPermissions()
                    ->cachePerUser()
                    ->addCacheableDependency($media);
            }
            else {
                $collabora_access = AccessResult::neutral()
                    ->cachePerPermissions();
            }
            break;
    }

    return $collabora_access->addCacheableDependency($media_view_access);
}
